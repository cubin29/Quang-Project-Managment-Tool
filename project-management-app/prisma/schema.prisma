// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique
  password String // Will be hashed
  name     String?
  avatar   String?
  role     Role   @default(MEMBER)
  activeStatus Boolean @default(true)
  lastPasswordUpdate DateTime @default(now())
  
  projects        Project[]
  assignedTasks   Task[]
  createdTasks    Task[]      @relation("TaskCreator")
  riskAssessments Risk[]
  ownedRisks      Risk[]      @relation("RiskOwner")
  workItems       WorkItem[]
  taskComments    TaskComment[]
  taskAttachments TaskAttachment[]
  changeRequests  ChangeRequest[]
  activityLogs    ActivityLog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  
  // Enhanced Project Fields
  businessImpact    Int    @default(1) // 1-10 scale
  techEffort        Int    @default(1) // 1-10 scale
  revenueUplift     Float? // Revenue Uplift in $
  headcountSaving   Float? // Headcount Saving per month
  projectValue      Float? // Project value in $
  team              String? // Team responsible
  country           String? // Country
  pic               String? // Person in Charge
  
  // PRD Additional Fields
  jiraUrl           String? // Jira Ticket URL
  wikiUrl           String? // Wiki Documentation URL
  
  // Timeline
  startDate DateTime?
  endDate   DateTime? // ETA
  
  // Project manager
  managerId String?
  manager   User?   @relation(fields: [managerId], references: [id])
  
  // Relations
  tasks         Task[]
  risks         Risk[]
  workItems     WorkItem[]
  metrics       ProjectMetric[]
  changeRequests ChangeRequest[]
  activityLogs  ActivityLog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  
  // PRD Additional Fields
  milestone   String?
  
  // Impact/Effort matrix
  impact Int @default(1) // 1-5 scale
  effort Int @default(1) // 1-5 scale
  
  // Timeline
  startDate DateTime?
  endDate   DateTime?
  dueDate   DateTime?
  eta       DateTime? // Estimated Time of Arrival
  
  // Kanban position
  columnId String?
  position Int     @default(0)
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id])
  
  createdById String
  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id])
  
  // Dependencies
  dependencies Task[] @relation("TaskDependencies")
  dependents   Task[] @relation("TaskDependencies")
  
  // Work breakdown structure
  parentId String?
  parent   Task?   @relation("TaskHierarchy", fields: [parentId], references: [id])
  children Task[]  @relation("TaskHierarchy")
  
  // New relations for PRD
  comments     TaskComment[]
  attachments  TaskAttachment[]
  activityLogs ActivityLog[]
  changeRequestTasks ChangeRequestTask[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskComment {
  id        String @id @default(cuid())
  content   String
  taskId    String
  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User   @relation(fields: [authorId], references: [id])
  parentId  String? // For threaded comments
  parent    TaskComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   TaskComment[] @relation("CommentReplies")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskAttachment {
  id         String @id @default(cuid())
  filename   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  taskId     String
  task       Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy String
  uploader   User   @relation(fields: [uploadedBy], references: [id])
  
  createdAt DateTime @default(now())
}

model ChangeRequest {
  id          String @id @default(cuid())
  title       String
  description String
  impact      String?
  status      ChangeRequestStatus @default(PENDING)
  date        DateTime @default(now())
  
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  requestedBy String
  requester   User    @relation(fields: [requestedBy], references: [id])
  
  // Linked tasks
  linkedTasks ChangeRequestTask[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChangeRequestTask {
  id              String        @id @default(cuid())
  changeRequestId String
  changeRequest   ChangeRequest @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)
  taskId          String
  task            Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([changeRequestId, taskId])
}

model ActivityLog {
  id        String @id @default(cuid())
  action    String // e.g., "Status changed", "Due date updated", "PIC assigned"
  oldValue  String?
  newValue  String?
  field     String? // e.g., "status", "dueDate", "assigneeId"
  
  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
}

model WorkItem {
  id          String @id @default(cuid())
  title       String
  description String?
  type        WorkItemType @default(TASK)
  status      TaskStatus   @default(TODO)
  
  // Timeline for Gantt charts
  startDate DateTime
  endDate   DateTime
  duration  Int // in days
  
  // WBS hierarchy
  wbsCode  String // e.g., "1.2.3"
  level    Int    @default(0)
  parentId String?
  parent   WorkItem? @relation("WorkItemHierarchy", fields: [parentId], references: [id])
  children WorkItem[] @relation("WorkItemHierarchy")
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id])
  
  // Dependencies
  dependencies WorkItem[] @relation("WorkItemDependencies")
  dependents   WorkItem[] @relation("WorkItemDependencies")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Risk {
  id          String @id @default(cuid())
  title       String
  description String
  category    RiskCategory @default(TECHNICAL)
  
  // Risk assessment - Updated to match PRD
  severity    RiskSeverity @default(LOW) // Low, Medium, High, Critical
  likelihood  RiskLikelihood @default(LOW) // Low, Medium, High
  probability Int @default(1) // 1-5 scale (keeping for backward compatibility)
  impact      Int @default(1) // 1-5 scale
  riskScore   Int @default(1) // calculated: probability * impact
  
  status         RiskStatus @default(IDENTIFIED)
  mitigationPlan String?
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assessorId String?
  assessor   User?   @relation(fields: [assessorId], references: [id])
  
  // PRD: Owner field
  ownerId    String?
  owner      User?   @relation("RiskOwner", fields: [ownerId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectMetric {
  id        String @id @default(cuid())
  name      String
  value     Float
  unit      String?
  category  MetricCategory @default(FINANCIAL)
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  recordedAt DateTime @default(now())
  createdAt  DateTime @default(now())
}

// Enums
enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  UAT
  DONE
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkItemType {
  EPIC
  FEATURE
  TASK
  BUG
  SPIKE
}

enum RiskCategory {
  TECHNICAL
  BUSINESS
  RESOURCE
  SCHEDULE
  QUALITY
  EXTERNAL
}

enum RiskStatus {
  IDENTIFIED
  ASSESSED
  MITIGATED
  CLOSED
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskLikelihood {
  LOW
  MEDIUM
  HIGH
}

enum ChangeRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MetricCategory {
  FINANCIAL
  PERFORMANCE
  QUALITY
  TIMELINE
  RESOURCE
}
